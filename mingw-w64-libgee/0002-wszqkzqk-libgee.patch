From 00e3fdce7c38c28e8ecffe569b23edd874a07b10 Mon Sep 17 00:00:00 2001
From: wszqkzqk <wszqkzqk@qq.com>
Date: Fri, 4 Nov 2022 15:41:40 +0800
Subject: [PATCH 1/3] add some functions close #44

---
 gee/functions.vala | 37 +++++++++++++++++++++++++++++++++++++
 1 file changed, 37 insertions(+)

diff --git a/gee/functions.vala b/gee/functions.vala
index c391c5f..1058ff0 100644
--- a/gee/functions.vala
+++ b/gee/functions.vala
@@ -56,6 +56,14 @@ namespace Gee {
 					else
 						return str_equal ((string) a, (string) b);
 				};
+			} else if (t == Type.CHAR || t == Type.UCHAR
+			|| t == Type.INT || t == Type.UINT
+			|| t == Type.INT64 || t == Type.UINT64
+			|| t == Type.LONG || t == Type.ULONG
+			|| t == Type.DOUBLE || t == Type.FLOAT) {
+				return (a, b) => {
+					return a == b;
+				}
 			} else if (t.is_a (typeof (Hashable))) {
 				return (a, b) => {
 					if (a == b)
@@ -93,6 +101,18 @@ namespace Gee {
 					else
 						return str_hash ((string) a);
 				};
+			} else if (t == Type.CHAR || t == Type.UCHAR || t == Type.INT || t == Type.UINT) {
+				return (a) => {
+					return int_hash (a);
+				}
+			} else if (t == Type.INT64 || t == Type.UINT64 || t == Type.LONG || t == Type.ULONG) {
+				return (a) => {
+					return int64_hash (a);
+				}
+			} else if (t == Type.DOUBLE || t == Type.FLOAT) {
+				return (a) => {
+					return double_hash (a);
+				}
 			} else if (t.is_a (typeof (Hashable))) {
 				return (a) => {
 					if (a == null)
@@ -124,6 +144,23 @@ namespace Gee {
 					else
 						return strcmp((string) a, (string) b);
 				};
+			} else if (t == Type.CHAR || t == Type.UCHAR
+			|| t == Type.INT || t == Type.UINT
+			|| t == Type.INT64 || t == Type.UINT64
+			|| t == Type.LONG || t == Type.ULONG
+			|| t == Type.DOUBLE || t == Type.FLOAT) {
+				return (a, b) => {
+					if (a == b)
+						return 0;
+					else if (a == null)
+						return -1;
+					else if (b == null)
+						return 1;
+					else if (a > b)
+						return 1;
+					else
+						return -1;
+				}
 			} else if (t.is_a (typeof (Comparable))) {
 				return (a, b) => {
 					if (a == b)
-- 
2.38.1.windows.1


From 079c2f53e5063af35b0855ec169f3dad6f0d26a2 Mon Sep 17 00:00:00 2001
From: wszqkzqk <wszqkzqk@qq.com>
Date: Fri, 4 Nov 2022 15:50:13 +0800
Subject: [PATCH 2/3] Adaptation for older versions of Vala

---
 gee/functions.vala | 12 ++++--------
 1 file changed, 4 insertions(+), 8 deletions(-)

diff --git a/gee/functions.vala b/gee/functions.vala
index 1058ff0..8d4978d 100644
--- a/gee/functions.vala
+++ b/gee/functions.vala
@@ -101,17 +101,13 @@ namespace Gee {
 					else
 						return str_hash ((string) a);
 				};
-			} else if (t == Type.CHAR || t == Type.UCHAR || t == Type.INT || t == Type.UINT) {
+			} else if (t == Type.CHAR || t == Type.UCHAR || t == Type.INT || t == Type.UINT || t == Type.FLOAT) {
 				return (a) => {
-					return int_hash (a);
+					return int_hash (a); // `GLib.int_hash` can be used for all 32-bit data
 				}
-			} else if (t == Type.INT64 || t == Type.UINT64 || t == Type.LONG || t == Type.ULONG) {
+			} else if (t == Type.INT64 || t == Type.UINT64 || t == Type.LONG || t == Type.ULONG || t == Type.DOUBLE) {
 				return (a) => {
-					return int64_hash (a);
-				}
-			} else if (t == Type.DOUBLE || t == Type.FLOAT) {
-				return (a) => {
-					return double_hash (a);
+					return int64_hash (a); // `GLib.int64_hash` can be used for all 64-bit data
 				}
 			} else if (t.is_a (typeof (Hashable))) {
 				return (a) => {
-- 
2.38.1.windows.1


From 36cb9cae85042668c93ec6e0b2a662d665f966f9 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?=E6=98=9F=E5=A4=96=E4=B9=8B=E7=A5=9E?= <wszqkzqk@qq.com>
Date: Fri, 4 Nov 2022 17:59:05 +0800
Subject: [PATCH 3/3] minor optimization

---
 gee/functions.vala | 12 ++++--------
 1 file changed, 4 insertions(+), 8 deletions(-)

diff --git a/gee/functions.vala b/gee/functions.vala
index 8d4978d..798f609 100644
--- a/gee/functions.vala
+++ b/gee/functions.vala
@@ -82,7 +82,7 @@ namespace Gee {
 					else
 						return ((Comparable<Comparable>) a).compare_to ((Comparable) b) == 0;};
 			} else {
-				return (a, b) => {return direct_equal (a, b);};
+				return (EqualDataFunc<void*>) direct_equal;
 			}
 		}
 
@@ -102,13 +102,9 @@ namespace Gee {
 						return str_hash ((string) a);
 				};
 			} else if (t == Type.CHAR || t == Type.UCHAR || t == Type.INT || t == Type.UINT || t == Type.FLOAT) {
-				return (a) => {
-					return int_hash (a); // `GLib.int_hash` can be used for all 32-bit data
-				}
+				return (HashDataFunc<void*>) int_hash; // `GLib.int_hash` can be used for all 32-bit data
 			} else if (t == Type.INT64 || t == Type.UINT64 || t == Type.LONG || t == Type.ULONG || t == Type.DOUBLE) {
-				return (a) => {
-					return int64_hash (a); // `GLib.int64_hash` can be used for all 64-bit data
-				}
+				return (HashDataFunc<void*>) int64_hash; // `GLib.int64_hash` can be used for all 64-bit data
 			} else if (t.is_a (typeof (Hashable))) {
 				return (a) => {
 					if (a == null)
@@ -117,7 +113,7 @@ namespace Gee {
 						return ((Hashable) a).hash();
 				};
 			} else {
-				return (a) => {return direct_hash (a);};
+				return (HashDataFunc<void*>) direct_hash;
 			}
 		}
 
-- 
2.38.1.windows.1

