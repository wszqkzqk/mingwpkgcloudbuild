From ae158f901594fcf194a50b476a599324b3ee4528 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?=E6=98=9F=E5=A4=96=E4=B9=8B=E7=A5=9E?= <wszqkzqk@qq.com>
Date: Fri, 28 Oct 2022 22:49:57 +0800
Subject: [PATCH] add support for verbatim template string

---
 vala/valaparser.vala    |  6 +++++
 vala/valascanner.vala   | 49 +++++++++++++++++++++++++++++++----------
 vala/valatokentype.vala |  2 ++
 3 files changed, 45 insertions(+), 12 deletions(-)

diff --git a/vala/valaparser.vala b/vala/valaparser.vala
index f703e9c86..b991efd23 100644
--- a/vala/valaparser.vala
+++ b/vala/valaparser.vala
@@ -384,6 +384,10 @@ public class Vala.Parser : CodeVisitor {
 			string raw_string = get_last_string ();
 			string escaped_string = raw_string.substring (3, raw_string.length - 6).escape ("");
 			return new StringLiteral ("\"%s\"".printf (escaped_string), get_src (begin));
+		case TokenType.VERBATIM_TEMPLATE_STRING_LITERAL:
+			string raw_string = get_last_string ();
+			string escaped_string = raw_string.escape ("");
+			return new StringLiteral ("\"%s\"".printf (escaped_string), get_src (begin));
 		case TokenType.NULL:
 			next ();
 			return new NullLiteral (get_src (begin));
@@ -719,6 +723,7 @@ public class Vala.Parser : CodeVisitor {
 		case TokenType.REGEX_LITERAL:
 		case TokenType.TEMPLATE_STRING_LITERAL:
 		case TokenType.VERBATIM_STRING_LITERAL:
+		case TokenType.VERBATIM_TEMPLATE_STRING_LITERAL:
 		case TokenType.NULL:
 			expr = parse_literal ();
 			break;
@@ -1269,6 +1274,7 @@ public class Vala.Parser : CodeVisitor {
 						case TokenType.STRING_LITERAL:
 						case TokenType.TEMPLATE_STRING_LITERAL:
 						case TokenType.VERBATIM_STRING_LITERAL:
+						case TokenType.VERBATIM_TEMPLATE_STRING_LITERAL:
 						case TokenType.REGEX_LITERAL:
 						case TokenType.NULL:
 						case TokenType.THIS:
diff --git a/vala/valascanner.vala b/vala/valascanner.vala
index daeb97feb..3fdd55a4d 100644
--- a/vala/valascanner.vala
+++ b/vala/valascanner.vala
@@ -54,7 +54,8 @@ public class Vala.Scanner {
 		BRACKET,
 		TEMPLATE,
 		TEMPLATE_PART,
-		REGEX_LITERAL
+		REGEX_LITERAL,
+		VERBATIM_TEMPLATE
 	}
 
 	public Scanner (SourceFile source_file) {
@@ -82,6 +83,10 @@ public class Vala.Scanner {
 		return (state_stack.length > 0 && state_stack[state_stack.length - 1] == State.TEMPLATE);
 	}
 
+	bool in_verbatim_template () {
+		return (state_stack.length > 0 && state_stack[state_stack.length - 1] == State.VERBATIM_TEMPLATE);
+	}
+
 	bool in_template_part () {
 		return (state_stack.length > 0 && state_stack[state_stack.length - 1] == State.TEMPLATE_PART);
 	}
@@ -685,7 +690,7 @@ public class Vala.Scanner {
 		return type;
 	}
 
-	public TokenType read_template_token (out SourceLocation token_begin, out SourceLocation token_end) {
+	public TokenType read_template_token (out SourceLocation token_begin, out SourceLocation token_end, bool is_verbatim) {
 		TokenType type;
 		char* begin = current;
 		token_begin = SourceLocation (begin, line, column);
@@ -697,9 +702,21 @@ public class Vala.Scanner {
 		} else {
 			switch (current[0]) {
 			case '"':
-				type = TokenType.CLOSE_TEMPLATE;
-				current++;
-				state_stack.length--;
+				if (is_verbatim) {
+					if (current < end -2 && current[1] == '"' && current[2] == '"') {
+						type = TokenType.CLOSE_TEMPLATE;
+						current += 3;
+						state_stack.length--;
+					} else {
+						type = TokenType.VERBATIM_TEMPLATE_STRING_LITERAL;
+						current++;
+						token_length_in_chars++;
+					}
+				} else {
+					type = TokenType.CLOSE_TEMPLATE;
+					current++;
+					state_stack.length--;
+				}
 				break;
 			case '$':
 				token_begin.pos++; // $ is not part of following token
@@ -718,19 +735,19 @@ public class Vala.Scanner {
 					state_stack += State.PARENS;
 					return read_token (out token_begin, out token_end);
 				} else if (current[0] == '$') {
-					type = TokenType.TEMPLATE_STRING_LITERAL;
+					type = (is_verbatim) ? TokenType.VERBATIM_TEMPLATE_STRING_LITERAL : TokenType.TEMPLATE_STRING_LITERAL;
 					current++;
 					state_stack += State.TEMPLATE_PART;
 				} else {
 					Report.error (get_source_reference (1), "unexpected character");
-					return read_template_token (out token_begin, out token_end);
+					return read_template_token (out token_begin, out token_end, is_verbatim);
 				}
 				break;
 			default:
-				type = TokenType.TEMPLATE_STRING_LITERAL;
+				type = (is_verbatim) ? TokenType.VERBATIM_TEMPLATE_STRING_LITERAL : TokenType.TEMPLATE_STRING_LITERAL;
 				token_length_in_chars = 0;
 				while (current < end && current[0] != '"' && current[0] != '$') {
-					if (current[0] == '\\') {
+					if (current[0] == '\\' && !is_verbatim) {
 						current++;
 						token_length_in_chars++;
 						if (current >= end) {
@@ -830,7 +847,9 @@ public class Vala.Scanner {
 
 	public TokenType read_token (out SourceLocation token_begin, out SourceLocation token_end) {
 		if (in_template ()) {
-			return read_template_token (out token_begin, out token_end);
+			return read_template_token (out token_begin, out token_end, false);
+		} else if (in_verbatim_template ()) {
+			return read_template_token (out token_begin, out token_end, true);
 		} else if (in_template_part ()) {
 			state_stack.length--;
 
@@ -861,9 +880,15 @@ public class Vala.Scanner {
 			type = get_identifier_or_keyword (begin, len);
 		} else if (current[0] == '@') {
 			if (current < end - 1 && current[1] == '"') {
+				current += 1;
+				if (current < end - 6 && begin[1] == '"' && begin[2] == '"') {
+					current += 3;
+					state_stack += State.VERBATIM_TEMPLATE;
+				} else {
+					current += 1;
+					state_stack += State.TEMPLATE;
+				}
 				type = TokenType.OPEN_TEMPLATE;
-				current += 2;
-				state_stack += State.TEMPLATE;
 			} else {
 				token_begin.pos++; // @ is not part of the identifier
 				current++;
diff --git a/vala/valatokentype.vala b/vala/valatokentype.vala
index 2c64ec1b0..6097beaff 100644
--- a/vala/valatokentype.vala
+++ b/vala/valatokentype.vala
@@ -149,6 +149,7 @@ public enum Vala.TokenType {
 	USING,
 	VAR,
 	VERBATIM_STRING_LITERAL,
+	VERBATIM_TEMPLATE_STRING_LITERAL,
 	VIRTUAL,
 	VOID,
 	VOLATILE,
@@ -284,6 +285,7 @@ public enum Vala.TokenType {
 		case USING: return "`using'";
 		case VAR: return "`var'";
 		case VERBATIM_STRING_LITERAL: return "verbatim string literal";
+		case VERBATIM_TEMPLATE_STRING_LITERAL: return "verbatim template string literal";
 		case VIRTUAL: return "`virtual'";
 		case VOID: return "`void'";
 		case VOLATILE: return "`volatile'";
-- 
2.38.1.windows.1

