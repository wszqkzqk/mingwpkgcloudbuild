From 9c8a449155c7bd36670ced5fbc98834592a3a65f Mon Sep 17 00:00:00 2001
From: Rico Tzschichholz <ricotz@ubuntu.com>
Date: Wed, 17 Aug 2022 10:31:41 +0200
Subject: [PATCH 1/9] tests: Add "entry point exists" test to increase coverage

---
 tests/Makefile.am                    | 1 +
 tests/methods/main-entry-exists.test | 9 +++++++++
 2 files changed, 10 insertions(+)
 create mode 100644 tests/methods/main-entry-exists.test

diff --git a/tests/Makefile.am b/tests/Makefile.am
index f549040d8..dd6f39684 100644
--- a/tests/Makefile.am
+++ b/tests/Makefile.am
@@ -245,6 +245,7 @@ TESTS = \
 	methods/argument-named.vala \
 	methods/delegate-target.vala \
 	methods/generics.vala \
+	methods/main-entry-exists.test \
 	methods/nowrapper-interface.vala \
 	methods/nowrapper-no-vfunc.test \
 	methods/parameter-ccode-type.vala \
diff --git a/tests/methods/main-entry-exists.test b/tests/methods/main-entry-exists.test
new file mode 100644
index 000000000..8681446cf
--- /dev/null
+++ b/tests/methods/main-entry-exists.test
@@ -0,0 +1,9 @@
+Invalid Code
+
+namespace Foo {
+	public static void main () {
+	}
+}
+
+void main () {
+}
-- 
2.38.1.windows.1


From 1560e367afc7d95ded40f1c67e559ac60c4c49cc Mon Sep 17 00:00:00 2001
From: Rico Tzschichholz <ricotz@ubuntu.com>
Date: Sun, 2 Oct 2022 13:17:04 +0200
Subject: [PATCH 2/9] codegen: Add glib.h include for TRUE/FALSE literal

Fixes https://gitlab.gnome.org/GNOME/vala/issues/1364
---
 codegen/valaccodebasemodule.vala             |  1 +
 tests/Makefile.am                            |  1 +
 tests/basic-types/boolean-literal.c-expected | 23 ++++++++++++++++++++
 tests/basic-types/boolean-literal.vala       |  5 +++++
 tests/parser/with-embedded.c-expected        |  2 +-
 5 files changed, 31 insertions(+), 1 deletion(-)
 create mode 100644 tests/basic-types/boolean-literal.c-expected
 create mode 100644 tests/basic-types/boolean-literal.vala

diff --git a/codegen/valaccodebasemodule.vala b/codegen/valaccodebasemodule.vala
index fb323e28e..ccaf79547 100644
--- a/codegen/valaccodebasemodule.vala
+++ b/codegen/valaccodebasemodule.vala
@@ -6862,6 +6862,7 @@ public abstract class Vala.CCodeBaseModule : CodeGenerator {
 
 	public CCodeExpression get_boolean_cconstant (bool b) {
 		if (context.profile == Profile.GOBJECT) {
+			cfile.add_include ("glib.h");
 			return new CCodeConstant (b ? "TRUE" : "FALSE");
 		} else {
 			cfile.add_include ("stdbool.h");
diff --git a/tests/Makefile.am b/tests/Makefile.am
index dd6f39684..6a2acf56c 100644
--- a/tests/Makefile.am
+++ b/tests/Makefile.am
@@ -49,6 +49,7 @@ TESTS = \
 	basic-types/floats.vala \
 	basic-types/floats-boxed-cast.vala \
 	basic-types/boolean.vala \
+	basic-types/boolean-literal.vala \
 	basic-types/custom-types.vala \
 	basic-types/default-gtype.vala \
 	basic-types/strings.vala \
diff --git a/tests/basic-types/boolean-literal.c-expected b/tests/basic-types/boolean-literal.c-expected
new file mode 100644
index 000000000..89441a6c1
--- /dev/null
+++ b/tests/basic-types/boolean-literal.c-expected
@@ -0,0 +1,23 @@
+/* basic_types_boolean_literal.c generated by valac, the Vala compiler
+ * generated from basic_types_boolean_literal.vala, do not modify */
+
+#include <glib.h>
+
+static void _vala_main (void);
+
+static void
+_vala_main (void)
+{
+	if (TRUE) {
+		return;
+	}
+}
+
+int
+main (int argc,
+      char ** argv)
+{
+	_vala_main ();
+	return 0;
+}
+
diff --git a/tests/basic-types/boolean-literal.vala b/tests/basic-types/boolean-literal.vala
new file mode 100644
index 000000000..be7d379e7
--- /dev/null
+++ b/tests/basic-types/boolean-literal.vala
@@ -0,0 +1,5 @@
+void main () {
+	if (true) {
+		return;
+	}
+}
diff --git a/tests/parser/with-embedded.c-expected b/tests/parser/with-embedded.c-expected
index d825c379f..29935c99e 100644
--- a/tests/parser/with-embedded.c-expected
+++ b/tests/parser/with-embedded.c-expected
@@ -1,9 +1,9 @@
 /* parser_with_embedded.c generated by valac, the Vala compiler
  * generated from parser_with_embedded.vala, do not modify */
 
+#include <glib.h>
 #include <stdlib.h>
 #include <string.h>
-#include <glib.h>
 
 #define _g_free0(var) (var = (g_free (var), NULL))
 #define _vala_assert(expr, msg) if G_LIKELY (expr) ; else g_assertion_message_expr (G_LOG_DOMAIN, __FILE__, __LINE__, G_STRFUNC, msg);
-- 
2.38.1.windows.1


From b4d3da24ff50f81453fe6958a090f9fae707c55f Mon Sep 17 00:00:00 2001
From: David Hewitt <davidmhewitt@gmail.com>
Date: Sat, 22 Oct 2022 15:30:29 +0100
Subject: [PATCH 3/9] pixman-1: Fix instance position of region copy methods

---
 vapi/pixman-1.vapi | 2 ++
 1 file changed, 2 insertions(+)

diff --git a/vapi/pixman-1.vapi b/vapi/pixman-1.vapi
index ecccc0113..8ceec25a4 100644
--- a/vapi/pixman-1.vapi
+++ b/vapi/pixman-1.vapi
@@ -106,6 +106,7 @@ namespace Pixman {
 		public Region16.with_extents (Pixman.Box16 extents);
 
 		public void translate (int x, int y);
+		[CCode (instance_pos = 1.1)]
 		public bool copy (out Pixman.Region16 region);
 		[CCode (instance_pos = 1.1)]
 		public bool intersect (out Pixman.Region16 new_reg, Pixman.Region16 reg2);
@@ -155,6 +156,7 @@ namespace Pixman {
 		public Region32.with_extents (Pixman.Box32 extents);
 
 		public void translate (int x, int y);
+		[CCode (instance_pos = 1.1)]
 		public bool copy (out Pixman.Region32 region);
 		[CCode (instance_pos = 1.1)]
 		public bool intersect (out Pixman.Region32 new_reg, Pixman.Region32 reg2);
-- 
2.38.1.windows.1


From e159e1dba7baa75814b1a84f668dc839e8c2e184 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Alberts=20Muktup=C4=81vels?= <alberts.muktupavels@gmail.com>
Date: Mon, 10 Oct 2022 14:25:22 +0300
Subject: [PATCH 4/9] codegen: Append VALA_EXTERN also when using fast-vapi

---
 codegen/valaccodebasemodule.vala | 8 ++++++++
 1 file changed, 8 insertions(+)

diff --git a/codegen/valaccodebasemodule.vala b/codegen/valaccodebasemodule.vala
index ccaf79547..ff0ee3f94 100644
--- a/codegen/valaccodebasemodule.vala
+++ b/codegen/valaccodebasemodule.vala
@@ -866,6 +866,14 @@ public abstract class Vala.CCodeBaseModule : CodeGenerator {
 		 * C code output.
 		 */
 		if (source_file.file_type == SourceFileType.FAST) {
+			if (requires_vala_extern) {
+				if (context.header_filename != null) {
+					if (!header_file.add_declaration ("VALA_EXTERN")) {
+						append_vala_extern_define (header_file);
+					}
+					internal_header_file.add_include (source_file.get_cinclude_filename (), true);
+				}
+			}
 			return;
 		}
 
-- 
2.38.1.windows.1


From 59020c6d6aaf6b97e930ef7b86a7f713b4e7a95b Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?=E6=98=9F=E5=A4=96=E4=B9=8B=E7=A5=9E?= <wszqkzqk@qq.com>
Date: Tue, 25 Oct 2022 00:07:41 +0800
Subject: [PATCH 5/9] Support the underscore separates digits in numbers

---
 vala/valaintegerliteral.vala |  4 +++
 vala/valarealliteral.vala    |  4 +++
 vala/valascanner.vala        | 60 +++++++++++++++++++++++++++++++-----
 3 files changed, 60 insertions(+), 8 deletions(-)

diff --git a/vala/valaintegerliteral.vala b/vala/valaintegerliteral.vala
index e28960126..4fc8e890b 100644
--- a/vala/valaintegerliteral.vala
+++ b/vala/valaintegerliteral.vala
@@ -66,6 +66,10 @@ public class Vala.IntegerLiteral : Literal {
 
 		checked = true;
 
+		// Support the underscore symbol separates digits in number values
+		string[] components = value.split ("_");
+		value = string.joinv("", components);
+
 		int l = 0;
 		while (value.has_suffix ("l") || value.has_suffix ("L")) {
 			l++;
diff --git a/vala/valarealliteral.vala b/vala/valarealliteral.vala
index 2924cd764..308e5167d 100644
--- a/vala/valarealliteral.vala
+++ b/vala/valarealliteral.vala
@@ -64,6 +64,10 @@ public class Vala.RealLiteral : Literal {
 
 		checked = true;
 
+		// Support the underscore symbol separates digits in number values
+		string[] components = value.split ("_");
+		value = string.joinv("", components);
+
 		string type_name;
 		if (value.has_suffix ("f") || value.has_suffix ("F")) {
 			type_name ="float";
diff --git a/vala/valascanner.vala b/vala/valascanner.vala
index daeb97feb..32cd37fe3 100644
--- a/vala/valascanner.vala
+++ b/vala/valascanner.vala
@@ -606,13 +606,35 @@ public class Vala.Scanner {
 		    && current[1] == 'x' && current[2].isxdigit ()) {
 			// hexadecimal integer literal
 			current += 2;
-			while (current < end && current[0].isxdigit ()) {
-				current++;
+			while (current < end) {
+				if (current[0].isxdigit ()) {
+					current += 1;
+				} else if (current[0] == '_') {
+					// Support the underscore symbol separates digits in number values
+					current += 1;
+					if ((current >= end) || (!(current[0].isxdigit ()))) {
+						current -= 1;
+						break;
+					}
+				} else {
+					break;
+				}
 			}
 		} else {
 			// decimal number
-			while (current < end && current[0].isdigit ()) {
-				current++;
+			while (current < end) {
+				if (current[0].isxdigit ()) {
+					current += 1;
+				} else if (current[0] == '_') {
+					// Support the underscore symbol separates digits in number values
+					current += 1;
+					if ((current >= end) || (!(current[0].isxdigit ()))) {
+						current -= 1;
+						break;
+					}
+				} else {
+					break;
+				}
 			}
 		}
 
@@ -620,8 +642,19 @@ public class Vala.Scanner {
 		if (current < end - 1 && current[0] == '.' && current[1].isdigit ()) {
 			type = TokenType.REAL_LITERAL;
 			current++;
-			while (current < end && current[0].isdigit ()) {
-				current++;
+			while (current < end) {
+				if (current[0].isxdigit ()) {
+					current += 1;
+				} else if (current[0] == '_') {
+					// Support the underscore symbol separates digits in number values
+					current += 1;
+					if ((current >= end) || (!(current[0].isxdigit ()))) {
+						current -= 1;
+						break;
+					}
+				} else {
+					break;
+				}
 			}
 		}
 
@@ -632,8 +665,19 @@ public class Vala.Scanner {
 			if (current < end && (current[0] == '+' || current[0] == '-')) {
 				current++;
 			}
-			while (current < end && current[0].isdigit ()) {
-				current++;
+			while (current < end) {
+				if (current[0].isxdigit ()) {
+					current += 1;
+				} else if (current[0] == '_') {
+					// Support the underscore symbol separates digits in number values
+					current += 1;
+					if ((current >= end) || (!(current[0].isxdigit ()))) {
+						current -= 1;
+						break;
+					}
+				} else {
+					break;
+				}
 			}
 		}
 
-- 
2.38.1.windows.1


From 0d949cfcfdf05275734629e9340da1e60c930dcc Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?=E6=98=9F=E5=A4=96=E4=B9=8B=E7=A5=9E?= <wszqkzqk@qq.com>
Date: Tue, 25 Oct 2022 00:27:56 +0800
Subject: [PATCH 6/9] genie: Support underscores separate  in numbers

---
 vala/valageniescanner.vala | 45 +++++++++++++++++++++++++++++++++-----
 1 file changed, 39 insertions(+), 6 deletions(-)

diff --git a/vala/valageniescanner.vala b/vala/valageniescanner.vala
index ef54ae7d3..a8696d494 100644
--- a/vala/valageniescanner.vala
+++ b/vala/valageniescanner.vala
@@ -974,8 +974,19 @@ public class Vala.Genie.Scanner {
 				type = TokenType.IDENTIFIER;
 			}
 		} else if (current[0].isdigit ()) {
-			while (current < end && current[0].isdigit ()) {
-				current++;
+			while (current < end) {
+				if (current[0].isxdigit ()) {
+					current += 1;
+				} else if (current[0] == '_') {
+					// Support the underscore symbol separates digits in number values
+					current += 1;
+					if ((current >= end) || (!(current[0].isxdigit ()))) {
+						current -= 1;
+						break;
+					}
+				} else {
+					break;
+				}
 			}
 			type = TokenType.INTEGER_LITERAL;
 			if (current < end && current[0].tolower () == 'l') {
@@ -993,16 +1004,38 @@ public class Vala.Genie.Scanner {
 				}
 			} else if (current < end - 1 && current[0] == '.' && current[1].isdigit ()) {
 				current++;
-				while (current < end && current[0].isdigit ()) {
-					current++;
+				while (current < end) {
+					if (current[0].isxdigit ()) {
+						current += 1;
+					} else if (current[0] == '_') {
+						// Support the underscore symbol separates digits in number values
+						current += 1;
+						if ((current >= end) || (!(current[0].isxdigit ()))) {
+							current -= 1;
+							break;
+						}
+					} else {
+						break;
+					}
 				}
 				if (current < end && current[0].tolower () == 'e') {
 					current++;
 					if (current < end && (current[0] == '+' || current[0] == '-')) {
 						current++;
 					}
-					while (current < end && current[0].isdigit ()) {
-						current++;
+					while (current < end) {
+						if (current[0].isxdigit ()) {
+							current += 1;
+						} else if (current[0] == '_') {
+							// Support the underscore symbol separates digits in number values
+							current += 1;
+							if ((current >= end) || (!(current[0].isxdigit ()))) {
+								current -= 1;
+								break;
+							}
+						} else {
+							break;
+						}
 					}
 				}
 				if (current < end && current[0].tolower () == 'f') {
-- 
2.38.1.windows.1


From 6473975a17a73482ca12700337c6944ea34058da Mon Sep 17 00:00:00 2001
From: Rico Tzschichholz <ricotz@ubuntu.com>
Date: Tue, 25 Oct 2022 08:27:04 +0200
Subject: [PATCH 7/9] tests: Add some underscore separated number tests

---
 tests/Makefile.am                                       | 4 ++++
 tests/scanner/number_underscore_separated.vala          | 5 +++++
 tests/scanner/number_underscore_separated_invalid.test  | 5 +++++
 tests/scanner/number_underscore_separated_invalid2.test | 5 +++++
 tests/scanner/number_underscore_separated_invalid3.test | 5 +++++
 5 files changed, 24 insertions(+)
 create mode 100644 tests/scanner/number_underscore_separated.vala
 create mode 100644 tests/scanner/number_underscore_separated_invalid.test
 create mode 100644 tests/scanner/number_underscore_separated_invalid2.test
 create mode 100644 tests/scanner/number_underscore_separated_invalid3.test

diff --git a/tests/Makefile.am b/tests/Makefile.am
index 6a2acf56c..42105ebaf 100644
--- a/tests/Makefile.am
+++ b/tests/Makefile.am
@@ -890,6 +890,10 @@ TESTS = \
 	annotations/description.vala \
 	annotations/noaccessormethod.test \
 	scanner/comment-not-closed.test \
+	scanner/number_underscore_separated.vala \
+	scanner/number_underscore_separated_invalid.test \
+	scanner/number_underscore_separated_invalid2.test \
+	scanner/number_underscore_separated_invalid3.test \
 	scanner/preprocessor-invalid.test \
 	scanner/preprocessor-missing-paren.test \
 	scanner/preprocessor-unexpected.test \
diff --git a/tests/scanner/number_underscore_separated.vala b/tests/scanner/number_underscore_separated.vala
new file mode 100644
index 000000000..ae6b6b46c
--- /dev/null
+++ b/tests/scanner/number_underscore_separated.vala
@@ -0,0 +1,5 @@
+void main () {
+	double foo = 3.141_592_653_589_793_2f;
+	uint64 bar = 299_792_458ul;
+	int64 minim = -0x80_00_00_01LL;
+}
diff --git a/tests/scanner/number_underscore_separated_invalid.test b/tests/scanner/number_underscore_separated_invalid.test
new file mode 100644
index 000000000..04c2018a3
--- /dev/null
+++ b/tests/scanner/number_underscore_separated_invalid.test
@@ -0,0 +1,5 @@
+Invalid Code
+
+void main () {
+	double foo = _3.141;
+}
diff --git a/tests/scanner/number_underscore_separated_invalid2.test b/tests/scanner/number_underscore_separated_invalid2.test
new file mode 100644
index 000000000..3265172e5
--- /dev/null
+++ b/tests/scanner/number_underscore_separated_invalid2.test
@@ -0,0 +1,5 @@
+Invalid Code
+
+void main () {
+	double foo = 3._141;
+}
diff --git a/tests/scanner/number_underscore_separated_invalid3.test b/tests/scanner/number_underscore_separated_invalid3.test
new file mode 100644
index 000000000..fde08221a
--- /dev/null
+++ b/tests/scanner/number_underscore_separated_invalid3.test
@@ -0,0 +1,5 @@
+Invalid Code
+
+void main () {
+	double foo = 3.14__1;
+}
-- 
2.38.1.windows.1


From d03e48ea8dab713de3c01be825c5916182dd058f Mon Sep 17 00:00:00 2001
From: wszqkzqk <wszqkzqk@qq.com>
Date: Tue, 25 Oct 2022 18:35:52 +0800
Subject: [PATCH 8/9] fix the wrong use of isxdigit

---
 vala/valageniescanner.vala | 45 ++++++++++++++++++++++++--------------
 vala/valascanner.vala      | 36 +++++++++++++++---------------
 2 files changed, 46 insertions(+), 35 deletions(-)

diff --git a/vala/valageniescanner.vala b/vala/valageniescanner.vala
index a8696d494..72e8398f1 100644
--- a/vala/valageniescanner.vala
+++ b/vala/valageniescanner.vala
@@ -975,13 +975,13 @@ public class Vala.Genie.Scanner {
 			}
 		} else if (current[0].isdigit ()) {
 			while (current < end) {
-				if (current[0].isxdigit ()) {
-					current += 1;
+				if (current[0].isdigit ()) {
+					current++;
 				} else if (current[0] == '_') {
 					// Support the underscore symbol separates digits in number values
-					current += 1;
-					if ((current >= end) || (!(current[0].isxdigit ()))) {
-						current -= 1;
+					current++;
+					if ((current >= end) || (!(current[0].isdigit ()))) {
+						current--;
 						break;
 					}
 				} else {
@@ -1005,13 +1005,13 @@ public class Vala.Genie.Scanner {
 			} else if (current < end - 1 && current[0] == '.' && current[1].isdigit ()) {
 				current++;
 				while (current < end) {
-					if (current[0].isxdigit ()) {
-						current += 1;
+					if (current[0].isdigit ()) {
+						current++;
 					} else if (current[0] == '_') {
 						// Support the underscore symbol separates digits in number values
-						current += 1;
-						if ((current >= end) || (!(current[0].isxdigit ()))) {
-							current -= 1;
+						current++;
+						if ((current >= end) || (!(current[0].isdigit ()))) {
+							current--;
 							break;
 						}
 					} else {
@@ -1024,13 +1024,13 @@ public class Vala.Genie.Scanner {
 						current++;
 					}
 					while (current < end) {
-						if (current[0].isxdigit ()) {
-							current += 1;
+						if (current[0].isdigit ()) {
+							current++;
 						} else if (current[0] == '_') {
 							// Support the underscore symbol separates digits in number values
-							current += 1;
-							if ((current >= end) || (!(current[0].isxdigit ()))) {
-								current -= 1;
+							current++;
+							if ((current >= end) || (!(current[0].isdigit ()))) {
+								current--;
 								break;
 							}
 						} else {
@@ -1046,8 +1046,19 @@ public class Vala.Genie.Scanner {
 					   && begin[0] == '0' && begin[1] == 'x' && begin[2].isxdigit ()) {
 				// hexadecimal integer literal
 				current++;
-				while (current < end && current[0].isxdigit ()) {
-					current++;
+				while (current < end) {
+					if (current[0].isxdigit ()) {
+						current++;
+					} else if (current[0] == '_') {
+						// Support the underscore symbol separates digits in number values
+						current++;
+						if ((current >= end) || (!(current[0].isxdigit ()))) {
+							current--;
+							break;
+						}
+					} else {
+						break;
+					}
 				}
 			} else if (current < end && is_ident_char (current[0])) {
 				// allow identifiers to start with a digit
diff --git a/vala/valascanner.vala b/vala/valascanner.vala
index 32cd37fe3..faa25834c 100644
--- a/vala/valascanner.vala
+++ b/vala/valascanner.vala
@@ -608,12 +608,12 @@ public class Vala.Scanner {
 			current += 2;
 			while (current < end) {
 				if (current[0].isxdigit ()) {
-					current += 1;
+					current++;
 				} else if (current[0] == '_') {
 					// Support the underscore symbol separates digits in number values
-					current += 1;
+					current++;
 					if ((current >= end) || (!(current[0].isxdigit ()))) {
-						current -= 1;
+						current--;
 						break;
 					}
 				} else {
@@ -623,13 +623,13 @@ public class Vala.Scanner {
 		} else {
 			// decimal number
 			while (current < end) {
-				if (current[0].isxdigit ()) {
-					current += 1;
+				if (current[0].isdigit ()) {
+					current++;
 				} else if (current[0] == '_') {
 					// Support the underscore symbol separates digits in number values
-					current += 1;
-					if ((current >= end) || (!(current[0].isxdigit ()))) {
-						current -= 1;
+					current++;
+					if ((current >= end) || (!(current[0].isdigit ()))) {
+						current--;
 						break;
 					}
 				} else {
@@ -643,13 +643,13 @@ public class Vala.Scanner {
 			type = TokenType.REAL_LITERAL;
 			current++;
 			while (current < end) {
-				if (current[0].isxdigit ()) {
-					current += 1;
+				if (current[0].isdigit ()) {
+					current++;
 				} else if (current[0] == '_') {
 					// Support the underscore symbol separates digits in number values
-					current += 1;
-					if ((current >= end) || (!(current[0].isxdigit ()))) {
-						current -= 1;
+					current++;
+					if ((current >= end) || (!(current[0].isdigit ()))) {
+						current--;
 						break;
 					}
 				} else {
@@ -666,13 +666,13 @@ public class Vala.Scanner {
 				current++;
 			}
 			while (current < end) {
-				if (current[0].isxdigit ()) {
-					current += 1;
+				if (current[0].isdigit ()) {
+					current++;
 				} else if (current[0] == '_') {
 					// Support the underscore symbol separates digits in number values
-					current += 1;
-					if ((current >= end) || (!(current[0].isxdigit ()))) {
-						current -= 1;
+					current++;
+					if ((current >= end) || (!(current[0].isdigit ()))) {
+						current--;
 						break;
 					}
 				} else {
-- 
2.38.1.windows.1


From f855c291059781327ac8f5f65403a148d22dc8f3 Mon Sep 17 00:00:00 2001
From: Rico Tzschichholz <ricotz@ubuntu.com>
Date: Tue, 25 Oct 2022 12:57:08 +0200
Subject: [PATCH 9/9] tests: More tests

---
 tests/Makefile.am                             |  1 +
 .../number_underscore_separated.c-expected    | 30 +++++++++++++++++++
 .../scanner/number_underscore_separated.vala  |  5 ++--
 .../number_underscore_separated_invalid4.test |  5 ++++
 .../number_underscore_separated_invalid5.test |  5 ++++
 5 files changed, 44 insertions(+), 2 deletions(-)
 create mode 100644 tests/scanner/number_underscore_separated.c-expected
 create mode 100644 tests/scanner/number_underscore_separated_invalid4.test
 create mode 100644 tests/scanner/number_underscore_separated_invalid5.test

diff --git a/tests/Makefile.am b/tests/Makefile.am
index 42105ebaf..2bee76877 100644
--- a/tests/Makefile.am
+++ b/tests/Makefile.am
@@ -894,6 +894,7 @@ TESTS = \
 	scanner/number_underscore_separated_invalid.test \
 	scanner/number_underscore_separated_invalid2.test \
 	scanner/number_underscore_separated_invalid3.test \
+	scanner/number_underscore_separated_invalid4.test \
 	scanner/preprocessor-invalid.test \
 	scanner/preprocessor-missing-paren.test \
 	scanner/preprocessor-unexpected.test \
diff --git a/tests/scanner/number_underscore_separated.c-expected b/tests/scanner/number_underscore_separated.c-expected
new file mode 100644
index 000000000..3500e2504
--- /dev/null
+++ b/tests/scanner/number_underscore_separated.c-expected
@@ -0,0 +1,30 @@
+/* scanner_number_underscore_separated.c generated by valac, the Vala compiler
+ * generated from scanner_number_underscore_separated.vala, do not modify */
+
+#include <glib.h>
+#include <float.h>
+#include <math.h>
+
+static void _vala_main (void);
+
+static void
+_vala_main (void)
+{
+	gfloat foo = 0.0F;
+	gdouble baz = 0.0;
+	guint64 bar = 0ULL;
+	gint64 minim = 0LL;
+	foo = 3.1415926535897932f;
+	baz = 6022140.76e-1023;
+	bar = 299792458ULL;
+	minim = -0x80000001LL;
+}
+
+int
+main (int argc,
+      char ** argv)
+{
+	_vala_main ();
+	return 0;
+}
+
diff --git a/tests/scanner/number_underscore_separated.vala b/tests/scanner/number_underscore_separated.vala
index ae6b6b46c..045c27f5f 100644
--- a/tests/scanner/number_underscore_separated.vala
+++ b/tests/scanner/number_underscore_separated.vala
@@ -1,5 +1,6 @@
 void main () {
-	double foo = 3.141_592_653_589_793_2f;
-	uint64 bar = 299_792_458ul;
+	float foo = 3.141_592_653_589_793_2f;
+	double baz = 6_022_140.76e-1_023;
+	uint64 bar = 299_792_458ull;
 	int64 minim = -0x80_00_00_01LL;
 }
diff --git a/tests/scanner/number_underscore_separated_invalid4.test b/tests/scanner/number_underscore_separated_invalid4.test
new file mode 100644
index 000000000..56d1887d5
--- /dev/null
+++ b/tests/scanner/number_underscore_separated_invalid4.test
@@ -0,0 +1,5 @@
+Invalid Code
+
+void main () {
+	double foo = 3.141_;
+}
diff --git a/tests/scanner/number_underscore_separated_invalid5.test b/tests/scanner/number_underscore_separated_invalid5.test
new file mode 100644
index 000000000..8d3783b65
--- /dev/null
+++ b/tests/scanner/number_underscore_separated_invalid5.test
@@ -0,0 +1,5 @@
+Invalid Code
+
+void main () {
+	double foo = 3141e-3_;
+}
-- 
2.38.1.windows.1

